{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qotib\\\\OneDrive\\\\Desktop\\\\DNA_PROJECT\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for DNA input and the processed result\n  const [dnaSequence, setDnaSequence] = useState('');\n  const [processedDna, setProcessedDna] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Function to handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!dnaSequence) {\n      alert('Please enter a DNA sequence');\n      return;\n    }\n    setLoading(true); // Set loading to true while waiting for the response\n\n    try {\n      // Sending POST request to the server to process the DNA sequence\n      const response = await axios.post('http://localhost:3000/process-dna', {\n        dnaSequence: dnaSequence\n      });\n\n      // Set the processed DNA result\n      setProcessedDna(response.data.processedDna);\n    } catch (error) {\n      console.error('Error processing DNA:', error);\n      alert('Error processing DNA sequence');\n    } finally {\n      setLoading(false); // Set loading to false after receiving the response\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DNA Sequence Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter DNA Sequence: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: dnaSequence,\n          onChange: e => setDnaSequence(e.target.value),\n          placeholder: \"Enter DNA sequence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Process DNA'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), processedDna && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processed DNA Sequence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: processedDna\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fBKH2THv6H97q93rKVgkiffkPJw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","dnaSequence","setDnaSequence","processedDna","setProcessedDna","loading","setLoading","handleSubmit","e","preventDefault","alert","response","post","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/qotib/OneDrive/Desktop/DNA_PROJECT/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  // State for DNA input and the processed result\n  const [dnaSequence, setDnaSequence] = useState('');\n  const [processedDna, setProcessedDna] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Function to handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!dnaSequence) {\n      alert('Please enter a DNA sequence');\n      return;\n    }\n\n    setLoading(true); // Set loading to true while waiting for the response\n\n    try {\n      // Sending POST request to the server to process the DNA sequence\n      const response = await axios.post('http://localhost:3000/process-dna', {\n        dnaSequence: dnaSequence,\n      });\n\n      // Set the processed DNA result\n      setProcessedDna(response.data.processedDna);\n    } catch (error) {\n      console.error('Error processing DNA:', error);\n      alert('Error processing DNA sequence');\n    } finally {\n      setLoading(false); // Set loading to false after receiving the response\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>DNA Sequence Processor</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Enter DNA Sequence: </label>\n          <input\n            type=\"text\"\n            value={dnaSequence}\n            onChange={(e) => setDnaSequence(e.target.value)}\n            placeholder=\"Enter DNA sequence\"\n          />\n        </div>\n        <button type=\"submit\" disabled={loading}>\n          {loading ? 'Processing...' : 'Process DNA'}\n        </button>\n      </form>\n\n      {processedDna && (\n        <div>\n          <h2>Processed DNA Sequence</h2>\n          <p>{processedDna}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACR,WAAW,EAAE;MAChBS,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEAJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;IAElB,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,mCAAmC,EAAE;QACrEX,WAAW,EAAEA;MACf,CAAC,CAAC;;MAEF;MACAG,eAAe,CAACO,QAAQ,CAACE,IAAI,CAACV,YAAY,CAAC;IAC7C,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CJ,KAAK,CAAC,+BAA+B,CAAC;IACxC,CAAC,SAAS;MACRJ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,oBACER,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAAmB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BvB,OAAA;MAAMwB,QAAQ,EAAEf,YAAa;MAAAU,QAAA,gBAC3BnB,OAAA;QAAAmB,QAAA,gBACEnB,OAAA;UAAAmB,QAAA,EAAO;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnCvB,OAAA;UACEyB,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEvB,WAAY;UACnBwB,QAAQ,EAAGjB,CAAC,IAAKN,cAAc,CAACM,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;UAChDG,WAAW,EAAC;QAAoB;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNvB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAACK,QAAQ,EAAEvB,OAAQ;QAAAY,QAAA,EACrCZ,OAAO,GAAG,eAAe,GAAG;MAAa;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAENlB,YAAY,iBACXL,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BvB,OAAA;QAAAmB,QAAA,EAAId;MAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACrB,EAAA,CA3DQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}